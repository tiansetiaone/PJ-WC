import EventEmitter from 'eventemitter3';
export { EventEmitter };
/**
 * Wallet ready state.
 */
export var WalletReadyState;
(function (WalletReadyState) {
    /**
     * Adapter will start to check if wallet exists after adapter instance is created.
     */
    WalletReadyState["Loading"] = "Loading";
    /**
     * When checking ends and wallet is not found, readyState will be NotFound.
     */
    WalletReadyState["NotFound"] = "NotFound";
    /**
     * When checking ends and wallet is found, readyState will be Found.
     */
    WalletReadyState["Found"] = "Found";
})(WalletReadyState || (WalletReadyState = {}));
/**
 * Adapter state
 */
export var AdapterState;
(function (AdapterState) {
    /**
     * If adapter is checking the wallet, the state is Loading.
     */
    AdapterState["Loading"] = "Loading";
    /**
     * If wallet is not installed, the state is NotFound.
     */
    AdapterState["NotFound"] = "NotFound";
    /**
     * If wallet is installed but is not connected to current Dapp, the state is Disconnected.
     */
    AdapterState["Disconnect"] = "Disconnected";
    /**
     * Wallet is connected to current Dapp.
     */
    AdapterState["Connected"] = "Connected";
})(AdapterState || (AdapterState = {}));
export class Adapter extends EventEmitter {
    get connected() {
        return this.state === AdapterState.Connected;
    }
    /**
     * Some wallets such as TronLink don't support disconnect() method.
     */
    disconnect() {
        console.info("The current adapter doesn't support disconnect by DApp.");
        return Promise.resolve();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    multiSign(...args) {
        return Promise.reject("The current wallet doesn't support multiSign.");
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    switchChain(_chainId) {
        return Promise.reject("The current wallet doesn't support switch chain.");
    }
}
//# sourceMappingURL=adapter.js.map