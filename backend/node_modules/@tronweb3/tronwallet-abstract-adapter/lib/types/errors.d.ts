export declare class WalletError extends Error {
    error: any;
    constructor(message?: string, error?: any);
}
/**
 * Occurs when wallet is not installed.
 */
export declare class WalletNotFoundError extends WalletError {
    name: string;
    message: string;
}
/**
 * Occurs when connect to a wallet but there is no wallet selected.
 */
export declare class WalletNotSelectedError extends WalletError {
    name: string;
    message: string;
}
/**
 * Occurs when wallet is disconnected.
 * Used by some wallets which won't connect automatically when call `signMessage()` or `signTransaction()`.
 */
export declare class WalletDisconnectedError extends WalletError {
    name: string;
    message: string;
}
/**
 * Occurs when try to connect a wallet.
 */
export declare class WalletConnectionError extends WalletError {
    name: string;
}
/**
 * Occurs when try to disconnect a wallet.
 */
export declare class WalletDisconnectionError extends WalletError {
    name: string;
}
/**
 * Occurs when call `signMessage()`.
 */
export declare class WalletSignMessageError extends WalletError {
    name: string;
}
/**
 * Occurs when call `signTransaction()`.
 */
export declare class WalletSignTransactionError extends WalletError {
    name: string;
}
/**
 * Occurs when load wallet
 */
export declare class WalletWalletLoadError extends WalletError {
    name: string;
}
/**
 * Occurs when walletconnect QR window is closed.
 */
export declare class WalletWindowClosedError extends WalletError {
    name: string;
    message: string;
}
/**
 * Occurs when request wallet to switch chain.
 */
export declare class WalletSwitchChainError extends WalletError {
    name: string;
}
/**
 * Occurs when get network infomation.
 */
export declare class WalletGetNetworkError extends WalletError {
    name: string;
}
//# sourceMappingURL=errors.d.ts.map