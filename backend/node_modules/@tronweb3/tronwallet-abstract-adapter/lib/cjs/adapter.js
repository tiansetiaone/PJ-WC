"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Adapter = exports.AdapterState = exports.WalletReadyState = exports.EventEmitter = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
exports.EventEmitter = eventemitter3_1.default;
/**
 * Wallet ready state.
 */
var WalletReadyState;
(function (WalletReadyState) {
    /**
     * Adapter will start to check if wallet exists after adapter instance is created.
     */
    WalletReadyState["Loading"] = "Loading";
    /**
     * When checking ends and wallet is not found, readyState will be NotFound.
     */
    WalletReadyState["NotFound"] = "NotFound";
    /**
     * When checking ends and wallet is found, readyState will be Found.
     */
    WalletReadyState["Found"] = "Found";
})(WalletReadyState || (exports.WalletReadyState = WalletReadyState = {}));
/**
 * Adapter state
 */
var AdapterState;
(function (AdapterState) {
    /**
     * If adapter is checking the wallet, the state is Loading.
     */
    AdapterState["Loading"] = "Loading";
    /**
     * If wallet is not installed, the state is NotFound.
     */
    AdapterState["NotFound"] = "NotFound";
    /**
     * If wallet is installed but is not connected to current Dapp, the state is Disconnected.
     */
    AdapterState["Disconnect"] = "Disconnected";
    /**
     * Wallet is connected to current Dapp.
     */
    AdapterState["Connected"] = "Connected";
})(AdapterState || (exports.AdapterState = AdapterState = {}));
class Adapter extends eventemitter3_1.default {
    get connected() {
        return this.state === AdapterState.Connected;
    }
    /**
     * Some wallets such as TronLink don't support disconnect() method.
     */
    disconnect() {
        console.info("The current adapter doesn't support disconnect by DApp.");
        return Promise.resolve();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    multiSign(...args) {
        return Promise.reject("The current wallet doesn't support multiSign.");
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    switchChain(_chainId) {
        return Promise.reject("The current wallet doesn't support switch chain.");
    }
}
exports.Adapter = Adapter;
//# sourceMappingURL=adapter.js.map